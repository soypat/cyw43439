// Code generated by "stringer -type=DHCPOption -trimprefix=DHCP"; DO NOT EDIT.

package eth

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[DHCPWordAligned-0]
	_ = x[DHCPSubnetMask-1]
	_ = x[DHCPTimeOffset-2]
	_ = x[DHCPRouter-3]
	_ = x[DHCPTimeServers-4]
	_ = x[DHCPNameServers-5]
	_ = x[DHCPDNSServers-6]
	_ = x[DHCPLogServers-7]
	_ = x[DHCPCookieServers-8]
	_ = x[DHCPLPRServers-9]
	_ = x[DHCPImpressServers-10]
	_ = x[DHCPRLPServers-11]
	_ = x[DHCPHostName-12]
	_ = x[DHCPBootFileSize-13]
	_ = x[DHCPMeritDumpFile-14]
	_ = x[DHCPDomainName-15]
	_ = x[DHCPSwapServer-16]
	_ = x[DHCPRootPath-17]
	_ = x[DHCPExtensionFile-18]
	_ = x[DHCPIPLayerForwarding-19]
	_ = x[DHCPSrcrouteenabler-20]
	_ = x[DHCPPolicyFilter-21]
	_ = x[DHCPMaximumDGReassemblySize-22]
	_ = x[DHCPDefaultIPTTL-23]
	_ = x[DHCPPathMTUAgingTimeout-24]
	_ = x[DHCPMTUPlateau-25]
	_ = x[DHCPInterfaceMTUSize-26]
	_ = x[DHCPAllSubnetsAreLocal-27]
	_ = x[DHCPBroadcastAddress-28]
	_ = x[DHCPPerformMaskDiscovery-29]
	_ = x[DHCPProvideMasktoOthers-30]
	_ = x[DHCPPerformRouterDiscovery-31]
	_ = x[DHCPRouterSolicitationAddress-32]
	_ = x[DHCPStaticRoutingTable-33]
	_ = x[DHCPTrailerEncapsulation-34]
	_ = x[DHCPARPCacheTimeout-35]
	_ = x[DHCPEthernetEncapsulation-36]
	_ = x[DHCPDefaultTCPTimetoLive-37]
	_ = x[DHCPTCPKeepaliveInterval-38]
	_ = x[DHCPTCPKeepaliveGarbage-39]
	_ = x[DHCPNISDomainName-40]
	_ = x[DHCPNISServerAddresses-41]
	_ = x[DHCPNTPServersAddresses-42]
	_ = x[DHCPVendorSpecificInformation-43]
	_ = x[DHCPNetBIOSNameServer-44]
	_ = x[DHCPNetBIOSDatagramDistribution-45]
	_ = x[DHCPNetBIOSNodeType-46]
	_ = x[DHCPNetBIOSScope-47]
	_ = x[DHCPXWindowFontServer-48]
	_ = x[DHCPXWindowDisplayManager-49]
	_ = x[DHCPRequestedIPaddress-50]
	_ = x[DHCPIPAddressLeaseTime-51]
	_ = x[DHCPOptionOverload-52]
	_ = x[DHCPDHCPMessageType-53]
	_ = x[DHCPDHCPServerIdentification-54]
	_ = x[DHCPParameterRequestList-55]
	_ = x[DHCPMessage-56]
	_ = x[DHCPMaximumMessageSize-57]
	_ = x[DHCPRenewTimeValue-58]
	_ = x[DHCPRebindingTimeValue-59]
	_ = x[DHCPClientIdentifier-60]
	_ = x[DHCPClientIdentifier1-61]
}

const _DHCPOption_name = "WordAlignedSubnetMaskTimeOffsetRouterTimeServersNameServersDNSServersLogServersCookieServersLPRServersImpressServersRLPServersHostNameBootFileSizeMeritDumpFileDomainNameSwapServerRootPathExtensionFileIPLayerForwardingSrcrouteenablerPolicyFilterMaximumDGReassemblySizeDefaultIPTTLPathMTUAgingTimeoutMTUPlateauInterfaceMTUSizeAllSubnetsAreLocalBroadcastAddressPerformMaskDiscoveryProvideMasktoOthersPerformRouterDiscoveryRouterSolicitationAddressStaticRoutingTableTrailerEncapsulationARPCacheTimeoutEthernetEncapsulationDefaultTCPTimetoLiveTCPKeepaliveIntervalTCPKeepaliveGarbageNISDomainNameNISServerAddressesNTPServersAddressesVendorSpecificInformationNetBIOSNameServerNetBIOSDatagramDistributionNetBIOSNodeTypeNetBIOSScopeXWindowFontServerXWindowDisplayManagerRequestedIPaddressIPAddressLeaseTimeOptionOverloadDHCPMessageTypeDHCPServerIdentificationParameterRequestListMessageMaximumMessageSizeRenewTimeValueRebindingTimeValueClientIdentifierClientIdentifier1"

var _DHCPOption_index = [...]uint16{0, 11, 21, 31, 37, 48, 59, 69, 79, 92, 102, 116, 126, 134, 146, 159, 169, 179, 187, 200, 217, 232, 244, 267, 279, 298, 308, 324, 342, 358, 378, 397, 419, 444, 462, 482, 497, 518, 538, 558, 577, 590, 608, 627, 652, 669, 696, 711, 723, 740, 761, 779, 797, 811, 826, 850, 870, 877, 895, 909, 927, 943, 960}

func (i DHCPOption) String() string {
	if i >= DHCPOption(len(_DHCPOption_index)-1) {
		return "DHCPOption(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _DHCPOption_name[_DHCPOption_index[i]:_DHCPOption_index[i+1]]
}
