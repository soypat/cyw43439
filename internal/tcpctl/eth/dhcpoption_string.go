// Code generated by "stringer -type=DHCPOption -trimprefix=DHCP_"; DO NOT EDIT.

package eth

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[DHCP_WordAligned-0]
	_ = x[DHCP_SubnetMask-1]
	_ = x[DHCP_TimeOffset-2]
	_ = x[DHCP_Router-3]
	_ = x[DHCP_TimeServers-4]
	_ = x[DHCP_NameServers-5]
	_ = x[DHCP_DNSServers-6]
	_ = x[DHCP_LogServers-7]
	_ = x[DHCP_CookieServers-8]
	_ = x[DHCP_LPRServers-9]
	_ = x[DHCP_ImpressServers-10]
	_ = x[DHCP_RLPServers-11]
	_ = x[DHCP_HostName-12]
	_ = x[DHCP_BootFileSize-13]
	_ = x[DHCP_MeritDumpFile-14]
	_ = x[DHCP_DomainName-15]
	_ = x[DHCP_SwapServer-16]
	_ = x[DHCP_RootPath-17]
	_ = x[DHCP_ExtensionFile-18]
	_ = x[DHCP_IPLayerForwarding-19]
	_ = x[DHCP_Srcrouteenabler-20]
	_ = x[DHCP_PolicyFilter-21]
	_ = x[DHCP_MaximumDGReassemblySize-22]
	_ = x[DHCP_DefaultIPTTL-23]
	_ = x[DHCP_PathMTUAgingTimeout-24]
	_ = x[DHCP_MTUPlateau-25]
	_ = x[DHCP_InterfaceMTUSize-26]
	_ = x[DHCP_AllSubnetsAreLocal-27]
	_ = x[DHCP_BroadcastAddress-28]
	_ = x[DHCP_PerformMaskDiscovery-29]
	_ = x[DHCP_ProvideMasktoOthers-30]
	_ = x[DHCP_PerformRouterDiscovery-31]
	_ = x[DHCP_RouterSolicitationAddress-32]
	_ = x[DHCP_StaticRoutingTable-33]
	_ = x[DHCP_TrailerEncapsulation-34]
	_ = x[DHCP_ARPCacheTimeout-35]
	_ = x[DHCP_EthernetEncapsulation-36]
	_ = x[DHCP_DefaultTCPTimetoLive-37]
	_ = x[DHCP_TCPKeepaliveInterval-38]
	_ = x[DHCP_TCPKeepaliveGarbage-39]
	_ = x[DHCP_NISDomainName-40]
	_ = x[DHCP_NISServerAddresses-41]
	_ = x[DHCP_NTPServersAddresses-42]
	_ = x[DHCP_VendorSpecificInformation-43]
	_ = x[DHCP_NetBIOSNameServer-44]
	_ = x[DHCP_NetBIOSDatagramDistribution-45]
	_ = x[DHCP_NetBIOSNodeType-46]
	_ = x[DHCP_NetBIOSScope-47]
	_ = x[DHCP_XWindowFontServer-48]
	_ = x[DHCP_XWindowDisplayManager-49]
	_ = x[DHCP_RequestedIPaddress-50]
	_ = x[DHCP_IPAddressLeaseTime-51]
	_ = x[DHCP_OptionOverload-52]
	_ = x[DHCP_MessageType-53]
	_ = x[DHCP_ServerIdentification-54]
	_ = x[DHCP_ParameterRequestList-55]
	_ = x[DHCP_Message-56]
	_ = x[DHCP_MaximumMessageSize-57]
	_ = x[DHCP_RenewTimeValue-58]
	_ = x[DHCP_RebindingTimeValue-59]
	_ = x[DHCP_ClientIdentifier-60]
	_ = x[DHCP_ClientIdentifier1-61]
}

const _DHCPOption_name = "WordAlignedSubnetMaskTimeOffsetRouterTimeServersNameServersDNSServersLogServersCookieServersLPRServersImpressServersRLPServersHostNameBootFileSizeMeritDumpFileDomainNameSwapServerRootPathExtensionFileIPLayerForwardingSrcrouteenablerPolicyFilterMaximumDGReassemblySizeDefaultIPTTLPathMTUAgingTimeoutMTUPlateauInterfaceMTUSizeAllSubnetsAreLocalBroadcastAddressPerformMaskDiscoveryProvideMasktoOthersPerformRouterDiscoveryRouterSolicitationAddressStaticRoutingTableTrailerEncapsulationARPCacheTimeoutEthernetEncapsulationDefaultTCPTimetoLiveTCPKeepaliveIntervalTCPKeepaliveGarbageNISDomainNameNISServerAddressesNTPServersAddressesVendorSpecificInformationNetBIOSNameServerNetBIOSDatagramDistributionNetBIOSNodeTypeNetBIOSScopeXWindowFontServerXWindowDisplayManagerRequestedIPaddressIPAddressLeaseTimeOptionOverloadMessageTypeServerIdentificationParameterRequestListMessageMaximumMessageSizeRenewTimeValueRebindingTimeValueClientIdentifierClientIdentifier1"

var _DHCPOption_index = [...]uint16{0, 11, 21, 31, 37, 48, 59, 69, 79, 92, 102, 116, 126, 134, 146, 159, 169, 179, 187, 200, 217, 232, 244, 267, 279, 298, 308, 324, 342, 358, 378, 397, 419, 444, 462, 482, 497, 518, 538, 558, 577, 590, 608, 627, 652, 669, 696, 711, 723, 740, 761, 779, 797, 811, 822, 842, 862, 869, 887, 901, 919, 935, 952}

func (i DHCPOption) String() string {
	if i >= DHCPOption(len(_DHCPOption_index)-1) {
		return "DHCPOption(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _DHCPOption_name[_DHCPOption_index[i]:_DHCPOption_index[i+1]]
}
